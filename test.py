# -*- coding: utf-8 -*-
################################################################################
# Note: Generated by soapbox.wsdl2py at 2014-10-20 22:34:14.415785
#       Try to avoid editing it if you might need to regenerate it.
################################################################################


from soapbox import soap, xsd
from soapbox.xsd import UNBOUNDED


################################################################################
# Schemas


# http://tempuri.org/


class Currency(xsd.String):
    '''
    '''
    enumeration = ['LTL', 'EUR']


class PrintStatus(xsd.String):
    '''
    '''
    enumeration = ['NotPrintedPrintStatus', 'OriginalPrintedPrintStatus', 'DuplicatePrintedPrintStatus', 'CopyPrintedPrintStatus']


class TariffOPvariants(xsd.String):
    '''
    '''
    enumeration = ['AgreementTariffOPvariants', 'DriverTariffOPvariants']


class TerritorialSalesTaxAC(xsd.String):
    '''
    '''
    enumeration = ['NoneTerritorialSalesTaxAC', 'EuNorwaySwitzerlandTerritorialSalesTaxAC', 'GeographicalEuropeTerritorialSalesTaxAC']


class OwnPartsTheftAC(xsd.String):
    '''
    '''
    enumeration = ['NoneOwnPartsTheftAC', 'OwnPart5OwnPartsTheftAC', 'OwnPart10OwnPartsTheftAC', 'OwnPart15OwnPartsTheftAC']


class OwnPartsAC(xsd.String):
    '''
    '''
    enumeration = ['NoneOwnPartsAC', 'OwnPart300OwnPartsAC', 'OwnPart500OwnPartsAC', 'OwnPart1000OwnPartsAC', 'OwnPart3000OwnPartsAC', 'OwnPart5000OwnPartsAC', 'OwnPart300LTLOwnPartsAC']


class ModPackageType(xsd.String):
    '''
    '''
    enumeration = ['Undefined', 'OnlyTheft', 'TheftAndDamage', 'TheftAndDamageWithCarReplacement', 'OnlyTotalDestruction']


class ModInsuranceSumType(xsd.String):
    '''
    '''
    enumeration = ['Undefined', 'Renewal', 'Accounting', 'Actual']


class CarUsageCategory(xsd.String):
    '''
    '''
    enumeration = ['PrivateCarUsageCategory', 'TaxiCarUsageCategory', 'SpecialCarUsageCategory', 'HazardousCargoCarUsageCategory', 'OtherCarUsageCategory']


class UsageRegion(xsd.String):
    '''
    '''
    enumeration = ['LithuaniaUsageRegion', 'BalticStatesUsageRegion', 'EuropeWithoutGBAndIEUsageRegion', 'EuropeWithGBAndIEUsageRegion']


class CarDataSource(xsd.String):
    '''
    '''
    enumeration = ['NoneCarDataSource', 'MotorBiuroCarDataSource', 'SERegitraCarDataSource', 'OtherCarDataSource']


class ContractorType(xsd.String):
    '''
    '''
    enumeration = ['PhysicalPersonContractorType', 'LegalPersonContractorType', 'ForeignerPersonContractorType', 'OtherContractorType']


class RequestOfGetYearsArgs(xsd.ComplexType):
    '''
    '''
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    Datas = xsd.ListElement('GetYearsArgs', 'Data', minOccurs=0, maxOccurs=1)
    MethodNames = xsd.ListElement(xsd.String, 'MethodName', minOccurs=0, maxOccurs=1)
    Logins = xsd.ListElement(xsd.String, 'Login', minOccurs=0, maxOccurs=1)
    Passwords = xsd.ListElement(xsd.String, 'Password', minOccurs=0, maxOccurs=1)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetYearsArgs(xsd.ComplexType):
    '''
    '''
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    VehicleGroups = xsd.ListElement(xsd.Int, 'VehicleGroup', minOccurs=1, maxOccurs=1)

    @classmethod
    def create(cls, VehicleGroup):
        instance = cls()
        instance.VehicleGroup = VehicleGroup
        return instance


class ResponseOfGetYearsResult(xsd.ComplexType):
    '''
    '''
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    Datas = xsd.ListElement('GetYearsResult', 'Data', minOccurs=0, maxOccurs=1)
    MethodNames = xsd.ListElement(xsd.String, 'MethodName', minOccurs=0, maxOccurs=1)
    ErrorMessages = xsd.ListElement(xsd.String, 'ErrorMessage', minOccurs=0, maxOccurs=1)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetYearsResult(xsd.ComplexType):
    '''
    '''
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    Yearss = xsd.ListElement('ArrayOfInt', 'Years', minOccurs=0, maxOccurs=1)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class ArrayOfInt(xsd.ComplexType):
    '''
    '''
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    ints = xsd.ListElement(xsd.Int, 'int', minOccurs=0, maxOccurs=UNBOUNDED)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class RequestOfGetBrandsArgs(xsd.ComplexType):
    '''
    '''
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    Datas = xsd.ListElement('GetBrandsArgs', 'Data', minOccurs=0, maxOccurs=1)
    MethodNames = xsd.ListElement(xsd.String, 'MethodName', minOccurs=0, maxOccurs=1)
    Logins = xsd.ListElement(xsd.String, 'Login', minOccurs=0, maxOccurs=1)
    Passwords = xsd.ListElement(xsd.String, 'Password', minOccurs=0, maxOccurs=1)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetBrandsArgs(xsd.ComplexType):
    '''
    '''
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    VehicleGroups = xsd.ListElement(xsd.Int, 'VehicleGroup', minOccurs=1, maxOccurs=1)
    Years = xsd.ListElement(xsd.Int, 'Year', minOccurs=1, maxOccurs=1)

    @classmethod
    def create(cls, VehicleGroup, Year):
        instance = cls()
        instance.VehicleGroup = VehicleGroup
        instance.Year = Year
        return instance


class ResponseOfGetBrandsResult(xsd.ComplexType):
    '''
    '''
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    Datas = xsd.ListElement('GetBrandsResult', 'Data', minOccurs=0, maxOccurs=1)
    MethodNames = xsd.ListElement(xsd.String, 'MethodName', minOccurs=0, maxOccurs=1)
    ErrorMessages = xsd.ListElement(xsd.String, 'ErrorMessage', minOccurs=0, maxOccurs=1)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetBrandsResult(xsd.ComplexType):
    '''
    '''
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    Brandss = xsd.ListElement('ArrayOfString', 'Brands', minOccurs=0, maxOccurs=1)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class ArrayOfString(xsd.ComplexType):
    '''
    '''
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    strings = xsd.ListElement(xsd.String, 'string', minOccurs=0, maxOccurs=UNBOUNDED, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class RequestOfGetModelsArgs(xsd.ComplexType):
    '''
    '''
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    Datas = xsd.ListElement('GetModelsArgs', 'Data', minOccurs=0, maxOccurs=1)
    MethodNames = xsd.ListElement(xsd.String, 'MethodName', minOccurs=0, maxOccurs=1)
    Logins = xsd.ListElement(xsd.String, 'Login', minOccurs=0, maxOccurs=1)
    Passwords = xsd.ListElement(xsd.String, 'Password', minOccurs=0, maxOccurs=1)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetModelsArgs(xsd.ComplexType):
    '''
    '''
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    VehicleGroups = xsd.ListElement(xsd.Int, 'VehicleGroup', minOccurs=1, maxOccurs=1)
    Years = xsd.ListElement(xsd.Int, 'Year', minOccurs=1, maxOccurs=1)
    Brands = xsd.ListElement(xsd.String, 'Brand', minOccurs=0, maxOccurs=1)

    @classmethod
    def create(cls, VehicleGroup, Year):
        instance = cls()
        instance.VehicleGroup = VehicleGroup
        instance.Year = Year
        return instance


class ResponseOfGetModelsResult(xsd.ComplexType):
    '''
    '''
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    Datas = xsd.ListElement('GetModelsResult', 'Data', minOccurs=0, maxOccurs=1)
    MethodNames = xsd.ListElement(xsd.String, 'MethodName', minOccurs=0, maxOccurs=1)
    ErrorMessages = xsd.ListElement(xsd.String, 'ErrorMessage', minOccurs=0, maxOccurs=1)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetModelsResult(xsd.ComplexType):
    '''
    '''
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    Modelss = xsd.ListElement('ArrayOfString', 'Models', minOccurs=0, maxOccurs=1)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class RequestOfGetModelTypesByModelArgs(xsd.ComplexType):
    '''
    '''
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    Datas = xsd.ListElement('GetModelTypesByModelArgs', 'Data', minOccurs=0, maxOccurs=1)
    MethodNames = xsd.ListElement(xsd.String, 'MethodName', minOccurs=0, maxOccurs=1)
    Logins = xsd.ListElement(xsd.String, 'Login', minOccurs=0, maxOccurs=1)
    Passwords = xsd.ListElement(xsd.String, 'Password', minOccurs=0, maxOccurs=1)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetModelTypesByModelArgs(xsd.ComplexType):
    '''
    '''
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    VehicleGroups = xsd.ListElement(xsd.Int, 'VehicleGroup', minOccurs=1, maxOccurs=1)
    Years = xsd.ListElement(xsd.Int, 'Year', minOccurs=1, maxOccurs=1)
    Brands = xsd.ListElement(xsd.String, 'Brand', minOccurs=0, maxOccurs=1)
    Models = xsd.ListElement(xsd.String, 'Model', minOccurs=0, maxOccurs=1)

    @classmethod
    def create(cls, VehicleGroup, Year):
        instance = cls()
        instance.VehicleGroup = VehicleGroup
        instance.Year = Year
        return instance


class ResponseOfGetModelTypesByModelResult(xsd.ComplexType):
    '''
    '''
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    Datas = xsd.ListElement('GetModelTypesByModelResult', 'Data', minOccurs=0, maxOccurs=1)
    MethodNames = xsd.ListElement(xsd.String, 'MethodName', minOccurs=0, maxOccurs=1)
    ErrorMessages = xsd.ListElement(xsd.String, 'ErrorMessage', minOccurs=0, maxOccurs=1)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetModelTypesByModelResult(xsd.ComplexType):
    '''
    '''
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    ModelTypess = xsd.ListElement('ArrayOfCarModelTypeInfo', 'ModelTypes', minOccurs=0, maxOccurs=1)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class ArrayOfCarModelTypeInfo(xsd.ComplexType):
    '''
    '''
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    CarModelTypeInfos = xsd.ListElement('CarModelTypeInfo', 'CarModelTypeInfo', minOccurs=0, maxOccurs=UNBOUNDED, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class CarModelTypeInfo(xsd.ComplexType):
    '''
    '''
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    Codes = xsd.ListElement(xsd.String, 'Code', minOccurs=0, maxOccurs=1)
    ModelTypes = xsd.ListElement(xsd.String, 'ModelType', minOccurs=0, maxOccurs=1)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class RequestOfGetNamesArgs(xsd.ComplexType):
    '''
    '''
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    Datas = xsd.ListElement('GetNamesArgs', 'Data', minOccurs=0, maxOccurs=1)
    MethodNames = xsd.ListElement(xsd.String, 'MethodName', minOccurs=0, maxOccurs=1)
    Logins = xsd.ListElement(xsd.String, 'Login', minOccurs=0, maxOccurs=1)
    Passwords = xsd.ListElement(xsd.String, 'Password', minOccurs=0, maxOccurs=1)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetNamesArgs(xsd.ComplexType):
    '''
    '''
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    VehicleGroups = xsd.ListElement(xsd.Int, 'VehicleGroup', minOccurs=1, maxOccurs=1)
    Years = xsd.ListElement(xsd.Int, 'Year', minOccurs=1, maxOccurs=1)
    Brands = xsd.ListElement(xsd.String, 'Brand', minOccurs=0, maxOccurs=1)

    @classmethod
    def create(cls, VehicleGroup, Year):
        instance = cls()
        instance.VehicleGroup = VehicleGroup
        instance.Year = Year
        return instance


class ResponseOfGetNamesResult(xsd.ComplexType):
    '''
    '''
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    Datas = xsd.ListElement('GetNamesResult', 'Data', minOccurs=0, maxOccurs=1)
    MethodNames = xsd.ListElement(xsd.String, 'MethodName', minOccurs=0, maxOccurs=1)
    ErrorMessages = xsd.ListElement(xsd.String, 'ErrorMessage', minOccurs=0, maxOccurs=1)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetNamesResult(xsd.ComplexType):
    '''
    '''
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    Namess = xsd.ListElement('ArrayOfString', 'Names', minOccurs=0, maxOccurs=1)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class RequestOfGetCarArgs(xsd.ComplexType):
    '''
    '''
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    Datas = xsd.ListElement('GetCarArgs', 'Data', minOccurs=0, maxOccurs=1)
    MethodNames = xsd.ListElement(xsd.String, 'MethodName', minOccurs=0, maxOccurs=1)
    Logins = xsd.ListElement(xsd.String, 'Login', minOccurs=0, maxOccurs=1)
    Passwords = xsd.ListElement(xsd.String, 'Password', minOccurs=0, maxOccurs=1)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetCarArgs(xsd.ComplexType):
    '''
    '''
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    VehicleGroups = xsd.ListElement(xsd.Int, 'VehicleGroup', minOccurs=1, maxOccurs=1)
    Years = xsd.ListElement(xsd.Int, 'Year', minOccurs=1, maxOccurs=1)
    Brands = xsd.ListElement(xsd.String, 'Brand', minOccurs=0, maxOccurs=1)
    Models = xsd.ListElement(xsd.String, 'Model', minOccurs=0, maxOccurs=1)
    Codes = xsd.ListElement(xsd.String, 'Code', minOccurs=0, maxOccurs=1)

    @classmethod
    def create(cls, VehicleGroup, Year):
        instance = cls()
        instance.VehicleGroup = VehicleGroup
        instance.Year = Year
        return instance


class ResponseOfGetCarResult(xsd.ComplexType):
    '''
    '''
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    Datas = xsd.ListElement('GetCarResult', 'Data', minOccurs=0, maxOccurs=1)
    MethodNames = xsd.ListElement(xsd.String, 'MethodName', minOccurs=0, maxOccurs=1)
    ErrorMessages = xsd.ListElement(xsd.String, 'ErrorMessage', minOccurs=0, maxOccurs=1)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetCarResult(xsd.ComplexType):
    '''
    '''
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    Cars = xsd.ListElement('Car', 'Car', minOccurs=0, maxOccurs=1)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class InsuredObject(xsd.ComplexType):
    '''
    '''
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    Riskss = xsd.ListElement('ArrayOfRisk', 'Risks', minOccurs=0, maxOccurs=1)
    Errorss = xsd.ListElement('ArrayOfError', 'Errors', minOccurs=0, maxOccurs=1)
    TotalInsuranceSums = xsd.ListElement('MoneyAmountStorage', 'TotalInsuranceSum', minOccurs=0, maxOccurs=1)
    TotalPremiums = xsd.ListElement('MoneyAmountStorage', 'TotalPremium', minOccurs=0, maxOccurs=1)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class Car(InsuredObject):

    INHERITANCE = xsd.Inheritance.EXTENSION
    INDICATOR = xsd.Sequence
    RegistrationNumbers = xsd.ListElement(xsd.String, 'RegistrationNumber', minOccurs=0, maxOccurs=1)
    ProductionYears = xsd.ListElement(xsd.Int, 'ProductionYear', minOccurs=1, maxOccurs=1)
    VinNumbers = xsd.ListElement(xsd.String, 'VinNumber', minOccurs=0, maxOccurs=1)
    MainGroupIds = xsd.ListElement(xsd.Int, 'MainGroupId', minOccurs=1, maxOccurs=1)
    GroupNames = xsd.ListElement(xsd.String, 'GroupName', minOccurs=0, maxOccurs=1)
    BrandIds = xsd.ListElement(xsd.Int, 'BrandId', minOccurs=1, maxOccurs=1)
    BrandNames = xsd.ListElement(xsd.String, 'BrandName', minOccurs=0, maxOccurs=1)
    ModelIds = xsd.ListElement(xsd.String, 'ModelId', minOccurs=0, maxOccurs=1)
    ModelNames = xsd.ListElement(xsd.String, 'ModelName', minOccurs=0, maxOccurs=1)
    LongModelNames = xsd.ListElement(xsd.String, 'LongModelName', minOccurs=0, maxOccurs=1)
    Types = xsd.ListElement(xsd.String, 'Type', minOccurs=0, maxOccurs=1)
    TypeIds = xsd.ListElement(xsd.String, 'TypeId', minOccurs=0, maxOccurs=1)
    Capacitys = xsd.ListElement(xsd.Int, 'Capacity', minOccurs=1, maxOccurs=1)
    Powers = xsd.ListElement(xsd.Int, 'Power', minOccurs=1, maxOccurs=1)
    UsageCategorys = xsd.ListElement('CarUsageCategory', 'UsageCategory', minOccurs=1, maxOccurs=1)
    UsageRegions = xsd.ListElement('UsageRegion', 'UsageRegion', minOccurs=1, maxOccurs=1)
    CarUseAboardLongerThan40Dayss = xsd.ListElement(xsd.Boolean, 'CarUseAboardLongerThan40Days', minOccurs=1, maxOccurs=1)
    Countrys = xsd.ListElement(xsd.String, 'Country', minOccurs=0, maxOccurs=1)
    DriverLicenseIssueDates = xsd.ListElement(xsd.DateTime, 'DriverLicenseIssueDate', minOccurs=1, maxOccurs=1)
    SeatsCounts = xsd.ListElement(xsd.Int, 'SeatsCount', minOccurs=1, maxOccurs=1)
    DoorsCounts = xsd.ListElement(xsd.Int, 'DoorsCount', minOccurs=1, maxOccurs=1)
    Regions = xsd.ListElement('Region', 'Region', minOccurs=0, maxOccurs=1)
    IsStandards = xsd.ListElement(xsd.Boolean, 'IsStandard', minOccurs=1, maxOccurs=1)
    SecurityLevels = xsd.ListElement(xsd.Int, 'SecurityLevel', minOccurs=1, maxOccurs=1)
    RiskGroups = xsd.ListElement(xsd.Int, 'RiskGroup', minOccurs=1, maxOccurs=1)
    FirstRegistrationDates = xsd.ListElement(xsd.DateTime, 'FirstRegistrationDate', minOccurs=1, maxOccurs=1)
    DataSources = xsd.ListElement('CarDataSource', 'DataSource', minOccurs=1, maxOccurs=1)
    Bodys = xsd.ListElement(xsd.String, 'Body', minOccurs=0, maxOccurs=1)
    Prices = xsd.ListElement(xsd.Float, 'Price', minOccurs=1, maxOccurs=1)
    MibCarInfos = xsd.ListElement('MibCar', 'MibCarInfo', minOccurs=0, maxOccurs=1)
    BonusMalusCategorys = xsd.ListElement(xsd.String, 'BonusMalusCategory', minOccurs=0, maxOccurs=1)
    RiskOCs = xsd.ListElement('RiskOC', 'RiskOC', minOccurs=0, maxOccurs=1)
    RiskACs = xsd.ListElement('RiskAC', 'RiskAC', minOccurs=0, maxOccurs=1)
    RiskNWs = xsd.ListElement('RiskNW', 'RiskNW', minOccurs=0, maxOccurs=1)
    RiskOPs = xsd.ListElement('RiskOP', 'RiskOP', minOccurs=0, maxOccurs=1)
    RiskWDs = xsd.ListElement('RiskWD', 'RiskWD', minOccurs=0, maxOccurs=1)
    RiskZKs = xsd.ListElement('RiskZK', 'RiskZK', minOccurs=0, maxOccurs=1)
    RiskGRs = xsd.ListElement('RiskGR', 'RiskGR', minOccurs=0, maxOccurs=1)
    RiskASSs = xsd.ListElement('RiskASS', 'RiskASS', minOccurs=0, maxOccurs=1)

    @classmethod
    def create(cls, ProductionYear, MainGroupId, BrandId, Capacity, Power, UsageCategory, UsageRegion, CarUseAboardLongerThan40Days, DriverLicenseIssueDate, SeatsCount, DoorsCount, IsStandard, SecurityLevel, RiskGroup, FirstRegistrationDate, DataSource, Price):
        instance = cls()
        instance.ProductionYear = ProductionYear
        instance.MainGroupId = MainGroupId
        instance.BrandId = BrandId
        instance.Capacity = Capacity
        instance.Power = Power
        instance.UsageCategory = UsageCategory
        instance.UsageRegion = UsageRegion
        instance.CarUseAboardLongerThan40Days = CarUseAboardLongerThan40Days
        instance.DriverLicenseIssueDate = DriverLicenseIssueDate
        instance.SeatsCount = SeatsCount
        instance.DoorsCount = DoorsCount
        instance.IsStandard = IsStandard
        instance.SecurityLevel = SecurityLevel
        instance.RiskGroup = RiskGroup
        instance.FirstRegistrationDate = FirstRegistrationDate
        instance.DataSource = DataSource
        instance.Price = Price
        return instance


class ArrayOfRisk(xsd.ComplexType):
    '''
    '''
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    Risks = xsd.ListElement('Risk', 'Risk', minOccurs=0, maxOccurs=UNBOUNDED, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class Risk(xsd.ComplexType):
    '''
    '''
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    PolicyIds = xsd.ListElement('ContractUniqueNumber', 'PolicyId', minOccurs=0, maxOccurs=1)
    InsuranceSums = xsd.ListElement('MoneyAmountStorage', 'InsuranceSum', minOccurs=0, maxOccurs=1)
    BasicRates = xsd.ListElement(xsd.Double, 'BasicRate', minOccurs=1, maxOccurs=1)
    PremiumBases = xsd.ListElement('MoneyAmountStorage', 'PremiumBase', minOccurs=0, maxOccurs=1)
    PremiumBasics = xsd.ListElement('MoneyAmountStorage', 'PremiumBasic', minOccurs=0, maxOccurs=1)
    Premiums = xsd.ListElement('MoneyAmountStorage', 'Premium', minOccurs=0, maxOccurs=1)
    PrintStatuss = xsd.ListElement('PrintStatus', 'PrintStatus', minOccurs=1, maxOccurs=1)
    AdditionalDiscounts = xsd.ListElement(xsd.Int, 'AdditionalDiscount', minOccurs=1, maxOccurs=1)

    @classmethod
    def create(cls, BasicRate, PrintStatus, AdditionalDiscount):
        instance = cls()
        instance.BasicRate = BasicRate
        instance.PrintStatus = PrintStatus
        instance.AdditionalDiscount = AdditionalDiscount
        return instance


class ContractUniqueNumber(xsd.ComplexType):
    '''
    '''
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    CountryCodes = xsd.ListElement(xsd.String, 'CountryCode', minOccurs=0, maxOccurs=1)
    Seriess = xsd.ListElement(xsd.String, 'Series', minOccurs=0, maxOccurs=1)
    FolderIds = xsd.ListElement(xsd.String, 'FolderId', minOccurs=0, maxOccurs=1)
    ProductIds = xsd.ListElement(xsd.String, 'ProductId', minOccurs=0, maxOccurs=1)
    ExternalSessionIds = xsd.ListElement(xsd.Int, 'ExternalSessionId', minOccurs=1, maxOccurs=1)

    @classmethod
    def create(cls, ExternalSessionId):
        instance = cls()
        instance.ExternalSessionId = ExternalSessionId
        return instance


class MoneyAmountStorage(xsd.ComplexType):
    '''
    '''
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    Currencys = xsd.ListElement('Currency', 'Currency', minOccurs=1, maxOccurs=1)
    Amounts = xsd.ListElement(xsd.Double, 'Amount', minOccurs=1, maxOccurs=1)
    ToLTLConversionRates = xsd.ListElement(xsd.Double, 'ToLTLConversionRate', minOccurs=1, maxOccurs=1)

    @classmethod
    def create(cls, Currency, Amount, ToLTLConversionRate):
        instance = cls()
        instance.Currency = Currency
        instance.Amount = Amount
        instance.ToLTLConversionRate = ToLTLConversionRate
        return instance


class RiskASS(Risk):
    '''
    '''
    INHERITANCE = xsd.Inheritance.EXTENSION
    INDICATOR = xsd.Sequence
    Discounts = xsd.ListElement(xsd.Int, 'Discount', minOccurs=1, maxOccurs=1)
    IsCalculateds = xsd.ListElement(xsd.Boolean, 'IsCalculated', minOccurs=1, maxOccurs=1)

    @classmethod
    def create(cls, Discount, IsCalculated):
        instance = cls()
        instance.Discount = Discount
        instance.IsCalculated = IsCalculated
        return instance


class RiskGR(Risk):
    '''
    '''
    INHERITANCE = xsd.Inheritance.EXTENSION
    INDICATOR = xsd.Sequence
    Durations = xsd.ListElement(xsd.Int, 'Duration', minOccurs=1, maxOccurs=1)
    MotorBiuroNumbers = xsd.ListElement(xsd.String, 'MotorBiuroNumber', minOccurs=0, maxOccurs=1)

    @classmethod
    def create(cls, Duration):
        instance = cls()
        instance.Duration = Duration
        return instance


class RiskZK(Risk):
    '''
    '''
    INHERITANCE = xsd.Inheritance.EXTENSION
    INDICATOR = xsd.Sequence
    MotorBiuroNumbers = xsd.ListElement(xsd.String, 'MotorBiuroNumber', minOccurs=0, maxOccurs=1)
    StartDates = xsd.ListElement(xsd.DateTime, 'StartDate', minOccurs=1, maxOccurs=1)
    EndDates = xsd.ListElement(xsd.DateTime, 'EndDate', minOccurs=1, maxOccurs=1)
    IssueDates = xsd.ListElement(xsd.DateTime, 'IssueDate', minOccurs=1, maxOccurs=1)

    @classmethod
    def create(cls, StartDate, EndDate, IssueDate):
        instance = cls()
        instance.StartDate = StartDate
        instance.EndDate = EndDate
        instance.IssueDate = IssueDate
        return instance


class RiskWD(Risk):
    '''
    '''
    INHERITANCE = xsd.Inheritance.EXTENSION
    INDICATOR = xsd.Sequence
    AdditionalEquipments = xsd.ListElement('ArrayOfAdditionalEquipment', 'AdditionalEquipment', minOccurs=0, maxOccurs=1)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class ArrayOfAdditionalEquipment(xsd.ComplexType):
    '''
    '''
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    AdditionalEquipments = xsd.ListElement('AdditionalEquipment', 'AdditionalEquipment', minOccurs=0, maxOccurs=UNBOUNDED, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class AdditionalEquipment(xsd.ComplexType):
    '''
    '''
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    Names = xsd.ListElement(xsd.String, 'Name', minOccurs=0, maxOccurs=1)
    Makes = xsd.ListElement(xsd.String, 'Make', minOccurs=0, maxOccurs=1)
    Models = xsd.ListElement(xsd.String, 'Model', minOccurs=0, maxOccurs=1)
    Values = xsd.ListElement('MoneyAmountStorage', 'Value', minOccurs=0, maxOccurs=1)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class RiskOP(Risk):
    '''
    '''
    INHERITANCE = xsd.Inheritance.EXTENSION
    INDICATOR = xsd.Sequence
    Variants = xsd.ListElement('TariffOPvariants', 'Variant', minOccurs=1, maxOccurs=1)
    DriversCounts = xsd.ListElement(xsd.Int, 'DriversCount', minOccurs=1, maxOccurs=1)
    InstalmentsCounts = xsd.ListElement(xsd.Int, 'InstalmentsCount', minOccurs=1, maxOccurs=1)
    IsContinuations = xsd.ListElement(xsd.Boolean, 'IsContinuation', minOccurs=1, maxOccurs=1)

    @classmethod
    def create(cls, Variant, DriversCount, InstalmentsCount, IsContinuation):
        instance = cls()
        instance.Variant = Variant
        instance.DriversCount = DriversCount
        instance.InstalmentsCount = InstalmentsCount
        instance.IsContinuation = IsContinuation
        return instance


class RiskNW(Risk):
    '''
    '''
    INHERITANCE = xsd.Inheritance.EXTENSION
    Variants = xsd.ListElement('TariffOPvariants', 'Variant', minOccurs=1, maxOccurs=1)
    DriversCounts = xsd.ListElement(xsd.Int, 'DriversCount', minOccurs=1, maxOccurs=1)
    InstalmentsCounts = xsd.ListElement(xsd.Int, 'InstalmentsCount', minOccurs=1, maxOccurs=1)
    IsContinuations = xsd.ListElement(xsd.Boolean, 'IsContinuation', minOccurs=1, maxOccurs=1)

    
class RiskAC(Risk):
    '''
    '''
    INHERITANCE = xsd.Inheritance.EXTENSION
    INDICATOR = xsd.Sequence
    TerritorialSalesTaxs = xsd.ListElement('TerritorialSalesTaxAC', 'TerritorialSalesTax', minOccurs=1, maxOccurs=1)
    AdditionalNotes = xsd.ListElement(xsd.String, 'AdditionalNote', minOccurs=0, maxOccurs=1)
    BonusMaluss = xsd.ListElement(xsd.Int, 'BonusMalus', minOccurs=1, maxOccurs=1)
    OwnPartThefts = xsd.ListElement('OwnPartsTheftAC', 'OwnPartTheft', minOccurs=1, maxOccurs=1)
    OwnParts = xsd.ListElement('OwnPartsAC', 'OwnPart', minOccurs=1, maxOccurs=1)
    OnlyTheftRisks = xsd.ListElement(xsd.Boolean, 'OnlyTheftRisk', minOccurs=1, maxOccurs=1)
    WithoutDepreciations = xsd.ListElement(xsd.Boolean, 'WithoutDepreciation', minOccurs=1, maxOccurs=1)
    FixedInsuranceSums = xsd.ListElement(xsd.Boolean, 'FixedInsuranceSum', minOccurs=1, maxOccurs=1)
    ReplacementCars = xsd.ListElement(xsd.Boolean, 'ReplacementCar', minOccurs=1, maxOccurs=1)
    NoInsuredSumOnPolicys = xsd.ListElement(xsd.Boolean, 'NoInsuredSumOnPolicy', minOccurs=1, maxOccurs=1)
    NonReductiveInsuranceSums = xsd.ListElement(xsd.Boolean, 'NonReductiveInsuranceSum', minOccurs=1, maxOccurs=1)
    InstalmentsCounts = xsd.ListElement(xsd.Int, 'InstalmentsCount', minOccurs=1, maxOccurs=1)
    InstalmentsPaymentDatess = xsd.ListElement('ArrayOfDateTime', 'InstalmentsPaymentDates', minOccurs=0, maxOccurs=1)
    InstalmentsPaymentSums = xsd.ListElement('ArrayOfMoneyAmountStorage', 'InstalmentsPaymentSum', minOccurs=0, maxOccurs=1)
    IsContinuations = xsd.ListElement(xsd.Boolean, 'IsContinuation', minOccurs=1, maxOccurs=1)
    InsuredYearss = xsd.ListElement(xsd.Int, 'InsuredYears', minOccurs=1, maxOccurs=1)
    ClaimsCounts = xsd.ListElement(xsd.Int, 'ClaimsCount', minOccurs=1, maxOccurs=1)
    YearsCounts = xsd.ListElement(xsd.Int, 'YearsCount', minOccurs=1, maxOccurs=1)
    RiskGroupFactors = xsd.ListElement(xsd.Double, 'RiskGroupFactor', minOccurs=1, maxOccurs=1)
    ModPackageTypes = xsd.ListElement('ModPackageType', 'ModPackageType', minOccurs=1, maxOccurs=1)
    ModInsuranceSumTypes = xsd.ListElement('ModInsuranceSumType', 'ModInsuranceSumType', minOccurs=1, maxOccurs=1)

    @classmethod
    def create(cls, TerritorialSalesTax, BonusMalus, OwnPartTheft, OwnPart, OnlyTheftRisk, WithoutDepreciation, FixedInsuranceSum, ReplacementCar, NoInsuredSumOnPolicy, NonReductiveInsuranceSum, InstalmentsCount, IsContinuation, InsuredYears, ClaimsCount, YearsCount, RiskGroupFactor, ModPackageType, ModInsuranceSumType):
        instance = cls()
        instance.TerritorialSalesTax = TerritorialSalesTax
        instance.BonusMalus = BonusMalus
        instance.OwnPartTheft = OwnPartTheft
        instance.OwnPart = OwnPart
        instance.OnlyTheftRisk = OnlyTheftRisk
        instance.WithoutDepreciation = WithoutDepreciation
        instance.FixedInsuranceSum = FixedInsuranceSum
        instance.ReplacementCar = ReplacementCar
        instance.NoInsuredSumOnPolicy = NoInsuredSumOnPolicy
        instance.NonReductiveInsuranceSum = NonReductiveInsuranceSum
        instance.InstalmentsCount = InstalmentsCount
        instance.IsContinuation = IsContinuation
        instance.InsuredYears = InsuredYears
        instance.ClaimsCount = ClaimsCount
        instance.YearsCount = YearsCount
        instance.RiskGroupFactor = RiskGroupFactor
        instance.ModPackageType = ModPackageType
        instance.ModInsuranceSumType = ModInsuranceSumType
        return instance


class ArrayOfDateTime(xsd.ComplexType):
    '''
    '''
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    dateTimes = xsd.ListElement(xsd.DateTime, 'dateTime', minOccurs=0, maxOccurs=UNBOUNDED)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class ArrayOfMoneyAmountStorage(xsd.ComplexType):
    '''
    '''
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    MoneyAmountStorages = xsd.ListElement('MoneyAmountStorage', 'MoneyAmountStorage', minOccurs=0, maxOccurs=UNBOUNDED, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class RiskOC(Risk):
    '''
    '''
    INHERITANCE = xsd.Inheritance.EXTENSION
    INDICATOR = xsd.Sequence
    AdditionalNotes = xsd.ListElement(xsd.String, 'AdditionalNote', minOccurs=0, maxOccurs=1)
    MotorBiuroNumbers = xsd.ListElement(xsd.String, 'MotorBiuroNumber', minOccurs=0, maxOccurs=1)
    InsuredDayss = xsd.ListElement(xsd.Int, 'InsuredDays', minOccurs=1, maxOccurs=1)
    ClaimsCounts = xsd.ListElement(xsd.Int, 'ClaimsCount', minOccurs=1, maxOccurs=1)
    IsContinuations = xsd.ListElement(xsd.Boolean, 'IsContinuation', minOccurs=1, maxOccurs=1)
    BonusMalusCategorys = xsd.ListElement(xsd.String, 'BonusMalusCategory', minOccurs=0, maxOccurs=1)

    @classmethod
    def create(cls, InsuredDays, ClaimsCount, IsContinuation):
        instance = cls()
        instance.InsuredDays = InsuredDays
        instance.ClaimsCount = ClaimsCount
        instance.IsContinuation = IsContinuation
        return instance


class ArrayOfError(xsd.ComplexType):
    '''
    '''
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    Errors = xsd.ListElement('Error', 'Error', minOccurs=0, maxOccurs=UNBOUNDED, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class Error(xsd.ComplexType):
    '''
    '''
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    FieldNames = xsd.ListElement(xsd.String, 'FieldName', minOccurs=0, maxOccurs=1)
    ErrorCodess = xsd.ListElement('ArrayOfString', 'ErrorCodes', minOccurs=0, maxOccurs=1)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class Region(xsd.ComplexType):
    '''
    '''
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    InternalIds = xsd.ListElement(xsd.Int, 'InternalId', minOccurs=1, maxOccurs=1)
    VersisIds = xsd.ListElement(xsd.Int, 'VersisId', minOccurs=1, maxOccurs=1)
    Names = xsd.ListElement(xsd.String, 'Name', minOccurs=0, maxOccurs=1)
    ZoneOCs = xsd.ListElement(xsd.Int, 'ZoneOC', minOccurs=1, maxOccurs=1)
    ZoneACs = xsd.ListElement(xsd.Int, 'ZoneAC', minOccurs=1, maxOccurs=1)

    @classmethod
    def create(cls, InternalId, VersisId, ZoneOC, ZoneAC):
        instance = cls()
        instance.InternalId = InternalId
        instance.VersisId = VersisId
        instance.ZoneOC = ZoneOC
        instance.ZoneAC = ZoneAC
        return instance


class MibCar(xsd.ComplexType):
    '''
    '''
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    MainGroupIds = xsd.ListElement(xsd.Int, 'MainGroupId', minOccurs=1, maxOccurs=1)
    Classifiers = xsd.ListElement(xsd.String, 'Classifier', minOccurs=0, maxOccurs=1)
    BrandNames = xsd.ListElement(xsd.String, 'BrandName', minOccurs=0, maxOccurs=1)
    ModelNames = xsd.ListElement(xsd.String, 'ModelName', minOccurs=0, maxOccurs=1)
    ProductionYears = xsd.ListElement(xsd.Int, 'ProductionYear', minOccurs=1, maxOccurs=1)
    FirstRegistrations = xsd.ListElement(xsd.DateTime, 'FirstRegistration', minOccurs=1, maxOccurs=1)
    FirstRegistrationLithuanias = xsd.ListElement(xsd.DateTime, 'FirstRegistrationLithuania', minOccurs=1, maxOccurs=1)
    Capacitys = xsd.ListElement(xsd.Decimal, 'Capacity', minOccurs=1, maxOccurs=1)
    Powers = xsd.ListElement(xsd.Decimal, 'Power', minOccurs=1, maxOccurs=1)
    Seatss = xsd.ListElement(xsd.Int, 'Seats', minOccurs=1, maxOccurs=1)
    OwnerIsLeasingCompanys = xsd.ListElement(xsd.Boolean, 'OwnerIsLeasingCompany', minOccurs=1, maxOccurs=1)
    VehicleUserIsItsOwners = xsd.ListElement(xsd.Boolean, 'VehicleUserIsItsOwner', minOccurs=1, maxOccurs=1)
    UserTypes = xsd.ListElement('ContractorType', 'UserType', minOccurs=1, maxOccurs=1)
    FirstNames = xsd.ListElement(xsd.String, 'FirstName', minOccurs=0, maxOccurs=1)
    LastNames = xsd.ListElement(xsd.String, 'LastName', minOccurs=0, maxOccurs=1)
    PersonalCodes = xsd.ListElement(xsd.String, 'PersonalCode', minOccurs=0, maxOccurs=1)
    CompanyNames = xsd.ListElement(xsd.String, 'CompanyName', minOccurs=0, maxOccurs=1)
    CompanyCodes = xsd.ListElement(xsd.String, 'CompanyCode', minOccurs=0, maxOccurs=1)

    @classmethod
    def create(cls, MainGroupId, ProductionYear, FirstRegistration, FirstRegistrationLithuania, Capacity, Power, Seats, OwnerIsLeasingCompany, VehicleUserIsItsOwner, UserType):
        instance = cls()
        instance.MainGroupId = MainGroupId
        instance.ProductionYear = ProductionYear
        instance.FirstRegistration = FirstRegistration
        instance.FirstRegistrationLithuania = FirstRegistrationLithuania
        instance.Capacity = Capacity
        instance.Power = Power
        instance.Seats = Seats
        instance.OwnerIsLeasingCompany = OwnerIsLeasingCompany
        instance.VehicleUserIsItsOwner = VehicleUserIsItsOwner
        instance.UserType = UserType
        return instance


class GetYears(xsd.ComplexType):
    '''
    '''
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    legacyRequest = xsd.ListElement('RequestOfGetYearsArgs', 'RequestOfGetYearsArgs', minOccurs=0, maxOccurs=1)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetYearsResponse(xsd.ComplexType):
    '''
    '''
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    GetYearsResult = xsd.ListElement('ResponseOfGetYearsResult', 'ResponseOfGetYearsResult', minOccurs=0, maxOccurs=1)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetBrands(xsd.ComplexType):
    '''
    '''
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    legacyRequest = xsd.ListElement('RequestOfGetBrandsArgs', 'RequestOfGetBrandsArgs', minOccurs=0, maxOccurs=1)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetBrandsResponse(xsd.ComplexType):
    '''
    '''
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    GetBrandsResult = xsd.ListElement('ResponseOfGetBrandsResult', 'ResponseOfGetBrandsResult', minOccurs=0, maxOccurs=1)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetModels(xsd.ComplexType):
    '''
    '''
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    legacyRequest = xsd.ListElement('RequestOfGetModelsArgs', 'RequestOfGetModelsArgs', minOccurs=0, maxOccurs=1)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetModelsResponse(xsd.ComplexType):
    '''
    '''
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    GetModelsResult = xsd.ListElement('ResponseOfGetModelsResult', 'ResponseOfGetModelsResult', minOccurs=0, maxOccurs=1)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetModelTypesByModel(xsd.ComplexType):
    '''
    '''
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    legacyRequest = xsd.ListElement('RequestOfGetModelTypesByModelArgs', 'RequestOfGetModelTypesByModelArgs', minOccurs=0, maxOccurs=1)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetModelTypesByModelResponse(xsd.ComplexType):
    '''
    '''
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    GetModelTypesByModelResult = xsd.ListElement('ResponseOfGetModelTypesByModelResult', 'ResponseOfGetModelTypesByModelResult', minOccurs=0, maxOccurs=1)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetNames(xsd.ComplexType):
    '''
    '''
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    legacyRequest = xsd.ListElement('RequestOfGetNamesArgs', 'RequestOfGetNamesArgs', minOccurs=0, maxOccurs=1)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetNamesResponse(xsd.ComplexType):
    '''
    '''
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    GetNamesResult = xsd.ListElement('ResponseOfGetNamesResult', 'ResponseOfGetNamesResult', minOccurs=0, maxOccurs=1)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetCar(xsd.ComplexType):
    '''
    '''
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    legacyRequest = xsd.ListElement('RequestOfGetCarArgs', 'RequestOfGetCarArgs', minOccurs=0, maxOccurs=1)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetCarResponse(xsd.ComplexType):
    '''
    '''
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    GetCarResult = xsd.ListElement('ResponseOfGetCarResult', 'ResponseOfGetCarResult', minOccurs=0, maxOccurs=1)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


Schema_eb208 = xsd.Schema(
    imports=[],
    targetNamespace='http://tempuri.org/',
    elementFormDefault='qualified',
    simpleTypes=[Currency, PrintStatus, TariffOPvariants, TerritorialSalesTaxAC, OwnPartsTheftAC, OwnPartsAC, ModPackageType, ModInsuranceSumType, CarUsageCategory, UsageRegion, CarDataSource, ContractorType],
    attributeGroups=[],
    groups=[],
    complexTypes=[RequestOfGetYearsArgs, GetYearsArgs, ResponseOfGetYearsResult, GetYearsResult, ArrayOfInt, RequestOfGetBrandsArgs, GetBrandsArgs, ResponseOfGetBrandsResult, GetBrandsResult, ArrayOfString, RequestOfGetModelsArgs, GetModelsArgs, ResponseOfGetModelsResult, GetModelsResult, RequestOfGetModelTypesByModelArgs, GetModelTypesByModelArgs, ResponseOfGetModelTypesByModelResult, GetModelTypesByModelResult, ArrayOfCarModelTypeInfo, CarModelTypeInfo, RequestOfGetNamesArgs, GetNamesArgs, ResponseOfGetNamesResult, GetNamesResult, RequestOfGetCarArgs, GetCarArgs, ResponseOfGetCarResult, GetCarResult, Car, InsuredObject, ArrayOfRisk, Risk, ContractUniqueNumber, MoneyAmountStorage, RiskASS, RiskGR, RiskZK, RiskWD, ArrayOfAdditionalEquipment, AdditionalEquipment, RiskOP, RiskNW, RiskAC, ArrayOfDateTime, ArrayOfMoneyAmountStorage, RiskOC, ArrayOfError, Error, Region, MibCar],
    elements={'GetYears': xsd.Element(GetYears()), 'GetYearsResponse': xsd.Element(GetYearsResponse()), 'GetBrands': xsd.Element(GetBrands()), 'GetBrandsResponse': xsd.Element(GetBrandsResponse()), 'GetModels': xsd.Element(GetModels()), 'GetModelsResponse': xsd.Element(GetModelsResponse()), 'GetModelTypesByModel': xsd.Element(GetModelTypesByModel()), 'GetModelTypesByModelResponse': xsd.Element(GetModelTypesByModelResponse()), 'GetNames': xsd.Element(GetNames()), 'GetNamesResponse': xsd.Element(GetNamesResponse()), 'GetCar': xsd.Element(GetCar()), 'GetCarResponse': xsd.Element(GetCarResponse())},
)


################################################################################
# Methods


GetYears_method = xsd.Method(
    soapAction='http://tempuri.org/GetYears',
    input='GetYears',
    inputPartName='parameters',
    output='GetYearsResponse',
    outputPartName='parameters',
    operationName='GetYears',
    style='document',
)


GetBrands_method = xsd.Method(
    soapAction='http://tempuri.org/GetBrands',
    input='GetBrands',
    inputPartName='parameters',
    output='GetBrandsResponse',
    outputPartName='parameters',
    operationName='GetBrands',
    style='document',
)


GetModels_method = xsd.Method(
    soapAction='http://tempuri.org/GetModels',
    input='GetModels',
    inputPartName='parameters',
    output='GetModelsResponse',
    outputPartName='parameters',
    operationName='GetModels',
    style='document',
)


GetModelTypesByModel_method = xsd.Method(
    soapAction='http://tempuri.org/GetModelTypesByModel',
    input='GetModelTypesByModel',
    inputPartName='parameters',
    output='GetModelTypesByModelResponse',
    outputPartName='parameters',
    operationName='GetModelTypesByModel',
    style='document',
)


GetNames_method = xsd.Method(
    soapAction='http://tempuri.org/GetNames',
    input='GetNames',
    inputPartName='parameters',
    output='GetNamesResponse',
    outputPartName='parameters',
    operationName='GetNames',
    style='document',
)


GetCar_method = xsd.Method(
    soapAction='http://tempuri.org/GetCar',
    input='GetCar',
    inputPartName='parameters',
    output='GetCarResponse',
    outputPartName='parameters',
    operationName='GetCar',
    style='document',
)


################################################################################
# SOAP Service


EmprekisServiceSoap_SERVICE = soap.Service(
    name='EmprekisServiceSoap',
    targetNamespace='http://tempuri.org/',
    location='%(scheme)s://%(host)s/Legacy/EmprekisService.asmx/true?wsdl',
    schema=Schema_eb208,
    version=soap.SOAPVersion.SOAP11,
    methods=[GetYears_method, GetBrands_method, GetModels_method, GetModelTypesByModel_method, GetNames_method, GetCar_method],
)


################################################################################
# SOAP Service Stub


class EmprekisServiceSoapServiceStub(soap.Stub):
    '''
    '''
    SERVICE = EmprekisServiceSoap_SERVICE
    SCHEME = 'http'
    HOST = 'testservices.compensa.lt:8085'

    def GetYears(self, GetYears):
        '''
        '''
        return self.call('GetYears', GetYears)

    def GetBrands(self, GetBrands):
        '''
        '''
        return self.call('GetBrands', GetBrands)

    def GetModels(self, GetModels):
        '''
        '''
        return self.call('GetModels', GetModels)

    def GetModelTypesByModel(self, GetModelTypesByModel):
        '''
        '''
        return self.call('GetModelTypesByModel', GetModelTypesByModel)

    def GetNames(self, GetNames):
        '''
        '''
        return self.call('GetNames', GetNames)

    def GetCar(self, GetCar):
        '''
        '''
        return self.call('GetCar', GetCar)

################################################################################
# Methods


GetYears_method = xsd.Method(
    soapAction='http://tempuri.org/GetYears',
    input='GetYears',
    inputPartName='parameters',
    output='GetYearsResponse',
    outputPartName='parameters',
    operationName='GetYears',
    style='document',
)


GetBrands_method = xsd.Method(
    soapAction='http://tempuri.org/GetBrands',
    input='GetBrands',
    inputPartName='parameters',
    output='GetBrandsResponse',
    outputPartName='parameters',
    operationName='GetBrands',
    style='document',
)


GetModels_method = xsd.Method(
    soapAction='http://tempuri.org/GetModels',
    input='GetModels',
    inputPartName='parameters',
    output='GetModelsResponse',
    outputPartName='parameters',
    operationName='GetModels',
    style='document',
)


GetModelTypesByModel_method = xsd.Method(
    soapAction='http://tempuri.org/GetModelTypesByModel',
    input='GetModelTypesByModel',
    inputPartName='parameters',
    output='GetModelTypesByModelResponse',
    outputPartName='parameters',
    operationName='GetModelTypesByModel',
    style='document',
)


GetNames_method = xsd.Method(
    soapAction='http://tempuri.org/GetNames',
    input='GetNames',
    inputPartName='parameters',
    output='GetNamesResponse',
    outputPartName='parameters',
    operationName='GetNames',
    style='document',
)


GetCar_method = xsd.Method(
    soapAction='http://tempuri.org/GetCar',
    input='GetCar',
    inputPartName='parameters',
    output='GetCarResponse',
    outputPartName='parameters',
    operationName='GetCar',
    style='document',
)


################################################################################
# SOAP Service


EmprekisServiceSoap12_SERVICE = soap.Service(
    name='EmprekisServiceSoap12',
    targetNamespace='http://tempuri.org/',
    location='%(scheme)s://%(host)s/Legacy/EmprekisService.asmx',
    schema=Schema_eb208,
    version=soap.SOAPVersion.SOAP11,
    methods=[GetYears_method, GetBrands_method, GetModels_method, GetModelTypesByModel_method, GetNames_method, GetCar_method],
)


################################################################################
# SOAP Service Stub


class EmprekisServiceSoap12ServiceStub(soap.Stub):
    '''
    '''
    SERVICE = EmprekisServiceSoap12_SERVICE
    SCHEME = 'http'
    HOST = 'testservices.compensa.lt:8085'

    def GetYears(self, GetYears):
        '''
        '''
        return self.call('GetYears', GetYears)

    def GetBrands(self, GetBrands):
        '''
        '''
        return self.call('GetBrands', GetBrands)

    def GetModels(self, GetModels):
        '''
        '''
        return self.call('GetModels', GetModels)

    def GetModelTypesByModel(self, GetModelTypesByModel):
        '''
        '''
        return self.call('GetModelTypesByModel', GetModelTypesByModel)

    def GetNames(self, GetNames):
        '''
        '''
        return self.call('GetNames', GetNames)

    def GetCar(self, GetCar):
        '''
        '''
        return self.call('GetCar', GetCar)


################################################################################
# vim:et:ft=python:nowrap:sts=4:sw=4:ts=4
